{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReservationService {\n  // construteur\n  constructor(http) {\n    this.http = http;\n    // declaration de la route de connexion\n    this.apiUrl = 'http://localhost:8000/api/';\n  }\n  // Récupérer la liste des réservations\n  getReservationsList() {\n    return this.http.get(this.apiUrl + 'reservations');\n  }\n  // Créer une nouvelle réservation\n  createReservation(reservationData) {\n    return this.http.post(this.apiUrl + 'reservation/create', reservationData);\n  }\n  // Recherche de réservations par nom du client\n  searchReservationByClientName(nomClient) {\n    return this.http.get(this.apiUrl + 'reservation/recherche/' + nomClient);\n  }\n  // Mettre à jour une réservation existante\n  updateReservation(reservationId, reservationData) {\n    return this.http.put(this.apiUrl + 'reservation/update/' + reservationId, reservationData);\n  }\n  // Supprimer une réservation en utilisant son ID\n  deleteReservation(reservationId) {\n    return this.http.delete(this.apiUrl + 'reservation/delete/' + reservationId);\n  }\n  // Récupérer les détails d'une réservation en utilisant son ID\n  getReservationDetail(reservationId) {\n    return this.http.get(this.apiUrl + 'reservation/detail/' + reservationId);\n  }\n  // Mettre fin à une réservation en utilisant son ID\n  finishReservation(reservationId) {\n    return this.http.post(this.apiUrl + 'fin/' + reservationId, {});\n  }\n  // Rechercher les voitures disponibles entre deux dates de réservation\n  searchAvailableCars(dateReservation, dateRetour) {\n    return this.http.get(this.apiUrl + 'voiture/disponible/' + dateReservation + '/' + dateRetour);\n  }\n}\nReservationService.ɵfac = function ReservationService_Factory(t) {\n  return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient));\n};\nReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservationService,\n  factory: ReservationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ReservationService","constructor","http","apiUrl","getReservationsList","get","createReservation","reservationData","post","searchReservationByClientName","nomClient","updateReservation","reservationId","put","deleteReservation","delete","getReservationDetail","finishReservation","searchAvailableCars","dateReservation","dateRetour","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\FrontEndLocationDeVoiture\\frontLocationVoiture_Components\\src\\app\\services\\reservation.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReservationService {\n\n  // construteur\n  constructor(private http: HttpClient) { }\n  // declaration de la route de connexion\n  private apiUrl = 'http://localhost:8000/api/';\n\n  // Récupérer la liste des réservations\n  getReservationsList(): Observable<any> {\n    return this.http.get(this.apiUrl + 'reservations');\n  }\n\n  // Créer une nouvelle réservation\n  createReservation(reservationData: any): Observable<any> {\n    return this.http.post(this.apiUrl + 'reservation/create', reservationData);\n  }\n\n  // Recherche de réservations par nom du client\n  searchReservationByClientName(nomClient: string): Observable<any> {\n    return this.http.get(this.apiUrl + 'reservation/recherche/' + nomClient);\n  }\n\n  // Mettre à jour une réservation existante\n  updateReservation(reservationId: number, reservationData: any): Observable<any> {\n    return this.http.put(this.apiUrl + 'reservation/update/' + reservationId, reservationData);\n  }\n\n  // Supprimer une réservation en utilisant son ID\n  deleteReservation(reservationId: number): Observable<any> {\n    return this.http.delete(this.apiUrl + 'reservation/delete/' + reservationId);\n  }\n\n  // Récupérer les détails d'une réservation en utilisant son ID\n  getReservationDetail(reservationId: number): Observable<any> {\n    return this.http.get(this.apiUrl + 'reservation/detail/' + reservationId);\n  }\n\n  // Mettre fin à une réservation en utilisant son ID\n  finishReservation(reservationId: number): Observable<any> {\n    return this.http.post(this.apiUrl + 'fin/' + reservationId, {});\n  }\n\n  // Rechercher les voitures disponibles entre deux dates de réservation\n  searchAvailableCars(dateReservation: string, dateRetour: string): Observable<any> {\n    return this.http.get(this.apiUrl + 'voiture/disponible/' + dateReservation + '/' + dateRetour);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,kBAAkB;EAE7B;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACxB;IACQ,KAAAC,MAAM,GAAG,4BAA4B;EAFL;EAIxC;EACAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,GAAG,cAAc,CAAC;EACpD;EAEA;EACAG,iBAAiBA,CAACC,eAAoB;IACpC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,IAAI,CAACL,MAAM,GAAG,oBAAoB,EAAEI,eAAe,CAAC;EAC5E;EAEA;EACAE,6BAA6BA,CAACC,SAAiB;IAC7C,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,GAAG,wBAAwB,GAAGO,SAAS,CAAC;EAC1E;EAEA;EACAC,iBAAiBA,CAACC,aAAqB,EAAEL,eAAoB;IAC3D,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAAC,IAAI,CAACV,MAAM,GAAG,qBAAqB,GAAGS,aAAa,EAAEL,eAAe,CAAC;EAC5F;EAEA;EACAO,iBAAiBA,CAACF,aAAqB;IACrC,OAAO,IAAI,CAACV,IAAI,CAACa,MAAM,CAAC,IAAI,CAACZ,MAAM,GAAG,qBAAqB,GAAGS,aAAa,CAAC;EAC9E;EAEA;EACAI,oBAAoBA,CAACJ,aAAqB;IACxC,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,GAAG,qBAAqB,GAAGS,aAAa,CAAC;EAC3E;EAEA;EACAK,iBAAiBA,CAACL,aAAqB;IACrC,OAAO,IAAI,CAACV,IAAI,CAACM,IAAI,CAAC,IAAI,CAACL,MAAM,GAAG,MAAM,GAAGS,aAAa,EAAE,EAAE,CAAC;EACjE;EAEA;EACAM,mBAAmBA,CAACC,eAAuB,EAAEC,UAAkB;IAC7D,OAAO,IAAI,CAAClB,IAAI,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,GAAG,qBAAqB,GAAGgB,eAAe,GAAG,GAAG,GAAGC,UAAU,CAAC;EAChG;;AA7CWpB,kBAAkB,C;mBAAlBA,kBAAkB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAlBxB,kBAAkB,C;SAAlBA,kBAAkB;EAAAyB,OAAA,EAAlBzB,kBAAkB,CAAA0B,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}